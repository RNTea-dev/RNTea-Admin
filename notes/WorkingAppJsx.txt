// src/App.jsx

// Import React and its hooks directly
import React, { useState, useEffect, useCallback } from 'react';

// Import Firebase modules after installing 'firebase' via npm
import { initializeApp } from 'firebase/app';
import {
    getAuth,
    signInWithEmailAndPassword,
    onAuthStateChanged,
    signOut,
    signInWithCustomToken // Added this for __initial_auth_token
} from 'firebase/auth';
import {
    getFirestore,
    collection,
    doc,
    getDoc,
    getDocs,
    setDoc,
    updateDoc,
    deleteDoc,
    query,
    where
} from 'firebase/firestore';

// Import Link for navigation within the admin panel (if needed)
import { Link } from 'react-router-dom';


// MANDATORY: Firebase configuration and initial auth token provided by the Canvas environment.
// These are globally available variables in the Canvas runtime.
const canvasFirebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
const canvasAppId = typeof __app_id !== 'undefined' ? __app_id : null;


// IMPORTANT: Firebase Configuration for Admin Panel
// Your web app's Firebase configuration.
// For Firebase JS SDK v7.20.0 and later, measurementId is optional.
// This fallback is crucial for local development if __firebase_config isn't available.
const firebaseConfig = canvasFirebaseConfig || {
    apiKey: "YOUR_ACTUAL_FIREBASE_API_KEY_HERE", // REMEMBER TO REPLACE THIS WITH YOUR REAL API KEY
    authDomain: "rntea-cca78.firebaseapp.com",
    projectId: "rntea-cca78",
    storageBucket: "rntea-cca78.firebasestorage.app",
    messagingSenderId: "806310857835",
    appId: "1:806310857835:web:b03b05847c818ee4fe352e",
    measurementId: "G-ZKZBPS9FGE"
};

// For the purpose of this example, we'll derive a consistent 'appId' for Firestore paths.
// Prefer __app_id from Canvas, otherwise fallback to Firebase project ID.
const appIdentifier = canvasAppId || firebaseConfig.projectId;


// Confirmation Modal Component - Displays a modal for confirmation
const ConfirmModal = ({ isOpen, message, onConfirm, onCancel }) => {
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white p-6 rounded-lg shadow-xl max-w-sm w-full space-y-4">
                <p className="text-lg font-semibold text-gray-800">{message}</p>
                <div className="flex justify-end space-x-3">
                    <button
                        onClick={onCancel}
                        className="px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors duration-200 transform hover:scale-105"
                    >
                        Cancel
                    </button>
                    <button
                        onClick={onConfirm}
                        className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors duration-200 transform hover:scale-105"
                    >
                        Confirm
                    </button>
                </div>
            </div>
        </div>
    );
};

// Message Box Component - Displays transient success/error messages
const MessageBox = ({ message, type }) => {
    if (!message) return null;
    const bgColor = type === 'success' ? 'bg-green-100' : 'bg-red-100';
    const textColor = type === 'success' ? 'text-green-700' : 'text-red-700';

    return (
        <div className={`p-3 rounded-md ${bgColor} ${textColor} my-4 message-box-fade show`}>
            {message}
        </div>
    );
};

// Create a Firebase Context to pass `db`, `auth`, `userId`, `appId` down to child components
export const FirebaseContext = React.createContext(null);


// Main Admin App Component
export default function App() {
    // State variables for managing UI and data
    const [activeSection, setActiveSection] = useState('hospitals');
    const [hospitals, setHospitals] = useState([]);
    const [doctors, setDoctors] = useState([]);
    const [reviews, setReviews] = useState([]);
    const [selectedHospital, setSelectedHospital] = useState(null);
    const [selectedDoctor, setSelectedDoctor] = useState(null);
    const [loading, setLoading] = useState(true);
    const [message, setMessage] = useState({ text: '', type: '' });
    const [showConfirm, setShowConfirm] = useState(false);
    const [confirmAction, setConfirmAction] = useState(null);

    // Firebase instances and user ID, stored in component state after initialization
    const [dbInstance, setDbInstance] = useState(null);
    const [authInstance, setAuthInstance] = useState(null);
    const [currentUserId, setCurrentUserId] = useState(null);
    const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false); // Tracks if an admin is securely logged in

    // State for login form inputs
    const [loginEmail, setLoginEmail] = useState('');
    const [loginPassword, setLoginPassword] = useState('');

    // State for UI elements
    const [showAddHospitalForm, setShowAddHospitalForm] = useState(false);
    const [hospitalSearchTerm, setHospitalSearchTerm] = useState('');
    const [doctorSearchTerm, setDoctorSearchTerm] = useState('');


    // Callback for displaying transient messages (success/error)
    const showMessage = useCallback((text, type) => {
        setMessage({ text, type });
        const timer = setTimeout(() => setMessage({ text: '', type: '' }), 5000);
        return () => clearTimeout(timer);
    }, []);

    // Function to check if the authenticated user is an admin
    const checkAdminStatus = useCallback(async (uid, db) => {
        if (!db || !appIdentifier) {
            console.error("[AdminAuthCheck] Firestore instance or appIdentifier not provided. Cannot check admin status.");
            showMessage('Firebase database not ready for admin check. Please try refreshing.', 'error');
            return false;
        }
        try {
            const adminDocRef = doc(db, `artifacts/${appIdentifier}/admins`, uid);
            const adminDocSnap = await getDoc(adminDocRef);
            if (adminDocSnap.exists()) {
                return true;
            } else {
                showMessage(`Access Denied: Your account (${uid}) is not authorized as an administrator. Logging out...`, 'error');
                return false;
            }
        } catch (error) {
            console.error("[AdminStatus] Error checking admin status:", error);
            showMessage(`Error verifying admin status: ${error.message}.`, 'error');
            return false;
        }
    }, [appIdentifier, showMessage]);


    // Effect 1: Initialize Firebase App and Services, and set up Auth State Listener (runs once)
    useEffect(() => {
        if (!authInstance && !dbInstance) {
            try {
                const firebaseApp = initializeApp(firebaseConfig);
                const authentication = getAuth(firebaseApp);
                const database = getFirestore(firebaseApp);

                setAuthInstance(authentication);
                setDbInstance(database);

                const unsubscribeAuth = onAuthStateChanged(authentication, async (user) => {
                    if (user) {
                        setCurrentUserId(user.uid);
                        const isAdmin = await checkAdminStatus(user.uid, database);
                        setIsAdminLoggedIn(isAdmin);
                        setLoading(false);

                        if (!isAdmin) {
                            await signOut(authentication);
                            showMessage('Access Denied: Your account is not authorized as an administrator. Logging out...', 'error');
                        }
                    } else {
                        setCurrentUserId(null);
                        setIsAdminLoggedIn(false);
                        setLoading(false);
                        showMessage('Please log in to access the Admin Panel.', 'info');
                    }
                });

                if (initialAuthToken) {
                    signInWithCustomToken(authentication, initialAuthToken)
                        .catch(tokenError => {
                            console.error("Error signing in with __initial_auth_token:", tokenError);
                            showMessage(`Automatic login failed: ${tokenError.message}. Please try manual login.`, 'error');
                            setLoading(false);
                        });
                } else if (!authentication.currentUser) {
                    setLoading(false);
                }

                return () => {
                    unsubscribeAuth();
                };

            } catch (error) {
                console.error("Firebase Initialization Error:", error);
                let errorMessage = `Failed to initialize Firebase: ${error.message}.`;
                if (error.code === 'auth/api-key-not-valid') {
                    errorMessage += " Please double-check your Firebase API key in firebaseConfig. It might be incorrect or not enabled for Authentication.";
                }
                setMessage({ text: errorMessage, type: 'error' });
                setLoading(false);
            }
        }
    }, [firebaseConfig, initialAuthToken, showMessage, checkAdminStatus, authInstance, dbInstance]);

    // Callback for fetching all hospitals from Firestore
    const fetchHospitals = useCallback(async () => {
        if (!dbInstance || !currentUserId || !appIdentifier || !isAdminLoggedIn) {
            return;
        }
        setLoading(true);
        try {
            const hospitalsCollectionRef = collection(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals`);
            const hospitalDocsSnapshot = await getDocs(hospitalsCollectionRef);
            const fetchedHospitals = hospitalDocsSnapshot.docs.map(document => ({ id: document.id, ...document.data() }));

            setHospitals(fetchedHospitals);
            showMessage('Hospitals loaded successfully!', 'success');
        } catch (error) {
            console.error("Error fetching hospitals from Firestore:", error);
            showMessage(`Error loading hospitals: ${error.message}`, 'error');
        } finally {
            setLoading(false);
        }
    }, [dbInstance, currentUserId, appIdentifier, isAdminLoggedIn, showMessage]);

    // Effect to trigger fetchHospitals once admin is logged in and DB instance is ready
    useEffect(() => {
        if (isAdminLoggedIn && dbInstance && currentUserId) {
            fetchHospitals();
        }
    }, [isAdminLoggedIn, dbInstance, currentUserId, fetchHospitals]);


    // Callback for fetching doctors for a specific hospital
    const fetchDoctors = useCallback(async (hospitalId) => {
        if (!dbInstance || !currentUserId || !appIdentifier || !isAdminLoggedIn) {
            showMessage("Authorization required to fetch doctors. Please login.", 'error');
            return;
        }
        setLoading(true);
        try {
            const doctorsColRef = collection(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${hospitalId}/doctors`);
            const doctorSnapshot = await getDocs(doctorsColRef);
            const fetchedDoctors = doctorSnapshot.docs.map(document => ({ id: document.id, ...document.data() }));
            setDoctors(fetchedDoctors);
            showMessage(`Doctors for ${selectedHospital?.name || 'selected hospital'} loaded successfully!`, 'success');
        } catch (error) {
            console.error("Error fetching doctors:", error);
            showMessage(`Error loading doctors: ${error.message}`, 'error');
        } finally {
            setLoading(false);
        }
    }, [dbInstance, currentUserId, selectedHospital, appIdentifier, isAdminLoggedIn, showMessage]);

    // Callback for fetching reviews for a specific doctor
    const fetchReviews = useCallback(async (hospitalId, doctorId) => {
        if (!dbInstance || !currentUserId || !appIdentifier || !isAdminLoggedIn) {
            showMessage("Authorization required to fetch reviews. Please login.", 'error');
            return;
        }
        setLoading(true);
        try {
            const doctorDocRef = doc(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${hospitalId}/doctors`, doctorId);
            const doctorSnap = await getDoc(doctorDocRef);
            if (doctorSnap.exists()) {
                const doctorData = doctorSnap.data();
                const reviewsWithComments = (doctorData.ratings || []).map(review => ({
                    ...review,
                    comments: review.comments || []
                }));
                setReviews(reviewsWithComments);
                showMessage(`Reviews for ${selectedDoctor?.name || 'selected doctor'} loaded successfully!`, 'success');
            } else {
                setReviews([]);
                showMessage('Doctor not found, no reviews to display.', 'error');
            }
        } catch (error) {
            console.error("Error fetching reviews:", error);
            showMessage(`Error loading reviews: ${error.message}`, 'error');
        } finally {
            setLoading(false);
        }
    }, [dbInstance, currentUserId, selectedDoctor, appIdentifier, isAdminLoggedIn, showMessage]);

    // --- Hospital Management Functions ---
    const handleAddHospital = async (e) => {
        e.preventDefault();
        if (!dbInstance || !currentUserId || !appIdentifier || !isAdminLoggedIn) { showMessage("Not authorized. Please login.", 'error'); return; }
        const form = e.target;
        const name = form.name.value.trim();
        const location = form.location.value.trim();
        if (!name || !location) { showMessage("Please fill all fields for hospital.", 'error'); return; }

        setLoading(true);
        try {
            const newHospitalRef = doc(collection(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals`));
            await setDoc(newHospitalRef, { name, location });

            const dummyDoctorRef = doc(collection(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${newHospitalRef.id}/doctors`), 'dummy_placeholder');
            await setDoc(dummyDoctorRef, { _placeholder: true });
            await deleteDoc(dummyDoctorRef);

            showMessage('Hospital added successfully!', 'success');
            form.reset();
            fetchHospitals();
        } catch (error) {
            console.error("Error adding hospital:", error);
            showMessage(`Error adding hospital: ${error.message}.`, 'error');
        } finally {
            setLoading(false);
        }
    };

    const handleEditHospital = async (id, newName, newLocation) => {
        if (!dbInstance || !currentUserId || !appIdentifier || !isAdminLoggedIn) { showMessage("Not authorized. Please login.", 'error'); return; }
        setLoading(true);
        try {
            const hospitalDocRef = doc(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals`, id);
            await updateDoc(hospitalDocRef, { name: newName.trim(), location: newLocation.trim() });
            showMessage('Hospital updated successfully!', 'success');
            fetchHospitals();
        } catch (error) {
            console.error("Error updating hospital:", error);
            showMessage(`Error updating hospital: ${error.message}.`, 'error');
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteHospital = (hospitalId) => {
        setShowConfirm(true);
        setConfirmAction(() => async () => {
            if (!dbInstance || !currentUserId || !appIdentifier || !isAdminLoggedIn) { showMessage("Not authorized. Please login.", 'error'); return; }
            setLoading(true);
            try {
                const doctorsToDeleteSnapshot = await getDocs(collection(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${hospitalId}/doctors`));
                for (const d of doctorsToDeleteSnapshot.docs) {
                    await deleteDoc(d.ref);
                }
                const hospitalDocRef = doc(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals`, hospitalId);
                await deleteDoc(hospitalDocRef);
                showMessage('Hospital and its doctors deleted successfully!', 'success');
                fetchHospitals();
            } catch (error) {
                console.error("Error deleting hospital:", error);
                showMessage(`Error deleting hospital: ${error.message}.`, 'error');
            } finally {
                setLoading(false);
                setShowConfirm(false);
                setConfirmAction(null);
            }
        });
    };

    const handleRemoveDuplicateHospitals = () => {
        setShowConfirm(true);
        setConfirmAction(() => async () => {
            if (!dbInstance || !currentUserId || !appIdentifier || !isAdminLoggedIn) { showMessage("Not authorized. Please login.", 'error'); return; }
            setLoading(true);
            try {
                const hospitalsColRef = collection(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals`);
                const hospitalDocsSnapshot = await getDocs(hospitalsColRef);
                const uniqueHospitalsMap = new Map();
                const duplicatesToDelete = [];

                for (const docSnap of hospitalDocsSnapshot.docs) {
                    const hospitalData = docSnap.data();
                    const compositeKey = `${hospitalData.name.toLowerCase()}|${hospitalData.location.toLowerCase()}`;

                    if (uniqueHospitalsMap.has(compositeKey)) {
                        duplicatesToDelete.push({ id: docSnap.id, ref: docSnap.ref });
                    } else {
                        uniqueHospitalsMap.set(compositeKey, { id: docSnap.id, ref: docSnap.ref });
                    }
                }

                if (duplicatesToDelete.length === 0) {
                    showMessage('No duplicate hospitals found.', 'success');
                } else {
                    showMessage(`Found ${duplicatesToDelete.length} duplicate hospitals. Deleting...`, 'info');
                    for (const duplicate of duplicatesToDelete) {
                        try {
                            const doctorsSubcollectionRef = collection(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${duplicate.id}/doctors`);
                            const doctorsSnapshot = await getDocs(doctorsSubcollectionRef);
                            for (const doctorDoc of doctorsSnapshot.docs) {
                                await deleteDoc(doctorDoc.ref);
                            }
                            await deleteDoc(duplicate.ref);
                        } catch (deletionError) {
                            console.error(`Error deleting duplicate hospital ${duplicate.id}:`, deletionError);
                            showMessage(`Partial success: Could not delete all duplicates. Error with ${duplicate.id}: ${deletionError.message}`, 'error');
                        }
                    }
                    showMessage('Duplicate hospitals and their associated doctors/reviews deleted successfully!', 'success');
                }
                fetchHospitals();
            } catch (error) {
                console.error("Error identifying/deleting duplicate hospitals:", error);
                showMessage(`Error processing duplicates: ${error.message}`, 'error');
            } finally {
                setLoading(false);
                setShowConfirm(false);
                setConfirmAction(null);
            }
        });
    };


    // --- Doctor Management Functions ---
    const handleAddDoctor = async (e) => {
        e.preventDefault();
        if (!dbInstance || !currentUserId || !appIdentifier || !selectedHospital || !isAdminLoggedIn) { showMessage("Not authorized or hospital not selected.", 'error'); return; }
        const form = e.target;
        const name = form.name.value.trim();
        const specialty = form.specialty.value.trim();
        if (!name || !specialty) { showMessage("Please fill all fields for doctor.", 'error'); return; }

        setLoading(true);
        try {
            const newDoctorRef = doc(collection(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${selectedHospital.id}/doctors`));
            await setDoc(newDoctorRef, { name, specialty, ratings: [] });
            showMessage('Doctor added successfully!', 'success');
            form.reset();
            fetchDoctors(selectedHospital.id);
        } catch (error) {
            console.error("Error adding doctor:", error);
            showMessage(`Error adding doctor: ${error.message}.`, 'error');
        } finally {
            setLoading(false);
        }
    };

    const handleEditDoctor = async (id, newName, newSpecialty) => {
        if (!dbInstance || !currentUserId || !appIdentifier || !selectedHospital || !isAdminLoggedIn) { showMessage("Not authorized or hospital not selected.", 'error'); return; }
        setLoading(true);
        try {
            const doctorDocRef = doc(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${selectedHospital.id}/doctors`, id);
            await updateDoc(doctorDocRef, { name: newName.trim(), specialty: newSpecialty.trim() });
            showMessage('Doctor updated successfully!', 'success');
            fetchDoctors(selectedHospital.id);
        } catch (error) {
            console.error("Error updating doctor:", error);
            showMessage(`Error updating doctor: ${error.message}.`, 'error');
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteDoctor = (doctorId) => {
        setShowConfirm(true);
        setConfirmAction(() => async () => {
            if (!dbInstance || !currentUserId || !appIdentifier || !selectedHospital || !isAdminLoggedIn) { showMessage("Not authorized or hospital not selected.", 'error'); return; }
            setLoading(true);
            try {
                const doctorDocRef = doc(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${selectedHospital.id}/doctors`, doctorId);
                await deleteDoc(doctorDocRef);
                showMessage('Doctor deleted successfully!', 'success');
                fetchDoctors(selectedHospital.id);
            } catch (error) {
                console.error("Error deleting doctor:", error);
                showMessage(`Error deleting doctor: ${error.message}.`, 'error');
            } finally {
                setLoading(false);
                setShowConfirm(false);
                setConfirmAction(null);
            }
        });
    };

    // --- Review Management Functions ---
    const handleDeleteReview = (reviewIndex) => {
        setShowConfirm(true);
        setConfirmAction(() => async () => {
            if (!dbInstance || !currentUserId || !appIdentifier || !selectedHospital || !selectedDoctor || !isAdminLoggedIn) { showMessage("Not authorized or doctor/hospital not selected.", 'error'); return; }
            setLoading(true);
            try {
                const doctorDocRef = doc(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${selectedHospital.id}/doctors`, selectedDoctor.id);
                const updatedRatings = reviews.filter((_, index) => index !== reviewIndex);
                await updateDoc(doctorDocRef, { ratings: updatedRatings });
                showMessage('Review deleted successfully!', 'success');
                fetchReviews(selectedHospital.id, selectedDoctor.id);
            } catch (error) {
                console.error("Error deleting review:", error);
                showMessage(`Error deleting review: ${error.message}.`, 'error');
            } finally {
                setLoading(false);
                setShowConfirm(false);
                setConfirmAction(null);
            }
        });
    };

    // Function to handle deleting a comment from a specific review
    const handleDeleteComment = (reviewIndex, commentIndex) => {
        setShowConfirm(true);
        setConfirmAction(() => async () => {
            if (!dbInstance || !currentUserId || !appIdentifier || !selectedHospital || !selectedDoctor || !isAdminLoggedIn) {
                showMessage("Not authorized or doctor/hospital not selected.", 'error');
                setShowConfirm(false);
                setConfirmAction(null);
                return;
            }
            setLoading(true);
            try {
                const doctorDocRef = doc(dbInstance, `artifacts/${appIdentifier}/public/data/hospitals/${selectedHospital.id}/doctors`, selectedDoctor.id);
                const doctorSnap = await getDoc(doctorDocRef);

                if (!doctorSnap || !doctorSnap.exists()) {
                    showMessage('Doctor not found or data is invalid. Cannot delete comment.', 'error');
                    setLoading(false);
                    setShowConfirm(false);
                    setConfirmAction(null);
                    return;
                }

                const doctorData = doctorSnap.data();
                const currentRatings = doctorData.ratings || [];

                // Deep copy to ensure immutability before modification
                const updatedRatings = JSON.parse(JSON.stringify(currentRatings));

                if (updatedRatings[reviewIndex] && updatedRatings[reviewIndex].comments) {
                    updatedRatings[reviewIndex].comments.splice(commentIndex, 1);
                } else {
                    showMessage('Review or comment not found.', 'error');
                    setLoading(false);
                    setShowConfirm(false);
                    setConfirmAction(null);
                    return;
                }

                await updateDoc(doctorDocRef, { ratings: updatedRatings });
                showMessage('Comment deleted successfully!', 'success');
                fetchReviews(selectedHospital.id, selectedDoctor.id);
            } catch (error) {
                console.error("Error deleting comment:", error);
                showMessage(`Error deleting comment: ${error.message}.`, 'error');
            } finally {
                setLoading(false);
                setShowConfirm(false);
                setConfirmAction(null);
            }
        });
    };

    // Handle Login Submission
    const handleLogin = async (e) => {
        e.preventDefault();
        setLoading(true);
        setMessage({ text: '', type: '' });
        try {
            if (authInstance) {
                 await signInWithEmailAndPassword(authInstance, loginEmail, loginPassword);
            } else {
                throw new Error("Firebase Auth not initialized.");
            }
            showMessage('Authenticating...', 'info');
        } catch (error) {
            console.error("Login error:", error);
            let errorMessage = "Login failed. Please check your credentials.";
            if (error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
                errorMessage = "Invalid email or password.";
            } else if (error.code === 'auth/invalid-email') {
                errorMessage = "Invalid email format.";
            } else if (error.code === 'auth/network-request-failed') {
                errorMessage = "Network error. Check your internet connection.";
            } else if (error.code === 'auth/api-key-not-valid') {
                errorMessage = "Login failed. Your Firebase API key is not valid or not configured for Authentication.";
            }
            setMessage({ text: errorMessage, type: 'error' });
            setLoading(false);
        }
    };

    // Handle Logout
    const handleLogout = async () => {
        if (!authInstance) return;
        setLoading(true);
        try {
            await signOut(authInstance);
            showMessage('Logged out successfully!', 'success');
            setHospitals([]);
            setDoctors([]);
            setReviews([]);
            setSelectedHospital(null);
            setSelectedDoctor(null);
            setActiveSection('hospitals');
            setLoginEmail('');
            setLoginPassword('');
            setIsAdminLoggedIn(false);
        } catch (error) {
            console.error("Logout error:", error);
            showMessage(`Logout failed: ${error.message}`, 'error');
        } finally {
            setLoading(false);
        }
    };


    // Conditional rendering logic based on `isAdminLoggedIn` state
    const renderContent = () => {
        if (loading) {
            return <p className="text-center text-gray-500 py-8">Loading application...</p>;
        }

        if (!isAdminLoggedIn) {
            return (
                <div className="text-center py-8">
                    <h3 className="text-2xl font-semibold text-gray-800 mb-4">Admin Login</h3>
                    <form onSubmit={handleLogin} className="max-w-sm mx-auto space-y-4">
                        <input
                            type="email"
                            placeholder="Admin Email"
                            value={loginEmail}
                            onChange={(e) => setLoginEmail(e.target.value)}
                            className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500"
                            required
                        />
                        <input
                            type="password"
                            placeholder="Admin Password"
                            value={loginPassword}
                            onChange={(e) => setLoginPassword(e.target.value)}
                            className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500"
                            required
                        />
                        <button type="submit" className="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 transition-colors duration-200">Login</button>
                    </form>
                </div>
            );
        }

        switch (activeSection) {
            case 'hospitals':
                const filteredHospitals = hospitals.filter(hospital =>
                    hospital.name.toLowerCase().includes(hospitalSearchTerm.toLowerCase()) ||
                    hospital.location.toLowerCase().includes(hospitalSearchTerm.toLowerCase())
                );

                return (
                    <div>
                        <h2 className="text-2xl font-semibold text-gray-800 mb-4 border-b pb-3">Hospitals ({hospitals.length} Total)</h2>
                        <div className="mb-4">
                            <input
                                type="text"
                                placeholder="Search hospitals by name or location..."
                                value={hospitalSearchTerm}
                                onChange={(e) => setHospitalSearchTerm(e.target.value)}
                                className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 shadow-sm"
                            />
                        </div>
                        <div className="mb-6">
                            <button
                                onClick={() => setShowAddHospitalForm(!showAddHospitalForm)}
                                className="w-full bg-indigo-500 text-white py-2 px-4 rounded-md hover:bg-indigo-600 transition-colors duration-200 flex items-center justify-center space-x-2 shadow-md"
                            >
                                {showAddHospitalForm ? 'Collapse Add Hospital Form' : 'Add New Hospital'}
                                <svg
                                    className={`w-5 h-5 transition-transform duration-300 ${showAddHospitalForm ? 'rotate-180' : 'rotate-0'}`}
                                    fill="none"
                                    stroke="currentColor"
                                    viewBox="0 0 24 24"
                                    xmlns="http://www.w3.org/2000/svg"
                                >
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M19 9l-7 7-7-7"></path>
                                </svg>
                            </button>
                            {showAddHospitalForm && (
                                <form onSubmit={handleAddHospital} className="space-y-4 mt-4 p-4 border border-gray-200 rounded-md bg-gray-50">
                                    <input type="text" name="name" placeholder="Hospital Name" className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500" required />
                                    <input type="text" name="location" placeholder="Location (e.g., Boston, MA)" className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500" required />
                                    <button type="submit" className="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 transition-colors duration-200">Add Hospital</button>
                                </form>
                            )}
                        </div>
                        <h3 className="text-xl font-semibold text-gray-700 mb-4 border-b pb-2">Existing Hospitals</h3>
                        <button
                            onClick={handleRemoveDuplicateHospitals}
                            className="mb-4 px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors duration-200 transform hover:scale-105"
                        >
                            Remove Duplicate Hospitals
                        </button>
                        {filteredHospitals.length === 0 ? (
                            <p className="text-gray-500">No hospitals found matching your search or none added yet.</p>
                        ) : (
                            <div className="space-y-3">
                                {filteredHospitals.map(hospital => (
                                    <div key={hospital.id} className="bg-blue-100 text-blue-800 p-4 rounded-lg shadow-sm flex justify-between items-center">
                                        <div>
                                            <p className="font-semibold">{hospital.name}</p>
                                            <p className="text-sm">{hospital.location}</p>
                                        </div>
                                        <div className="flex space-x-2">
                                            <button
                                                onClick={() => { setSelectedHospital(hospital); setActiveSection('doctors'); fetchDoctors(hospital.id); }}
                                                className="px-3 py-1 bg-blue-500 text-white text-sm rounded-md hover:bg-blue-600 transition-colors"
                                            >
                                                Manage Doctors
                                            </button>
                                            <button
                                                onClick={() => {
                                                    const newName = prompt("Enter new hospital name:", hospital.name);
                                                    const newLocation = prompt("Enter new hospital location:", hospital.location);
                                                    if (newName !== null && newLocation !== null) {
                                                        handleEditHospital(hospital.id, newName, newLocation);
                                                    }
                                                }}
                                                className="px-3 py-1 bg-yellow-500 text-white text-sm rounded-md hover:bg-yellow-600 transition-colors"
                                            >
                                                Edit
                                            </button>
                                            <button
                                                onClick={() => handleDeleteHospital(hospital.id)}
                                                className="px-3 py-1 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 transition-colors"
                                            >
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                );

            case 'doctors':
                const filteredDoctors = doctors.filter(doctor =>
                    doctor.name.toLowerCase().includes(doctorSearchTerm.toLowerCase()) ||
                    doctor.specialty.toLowerCase().includes(doctorSearchTerm.toLowerCase())
                );

                return (
                    <div>
                        <button
                            onClick={() => { setActiveSection('hospitals'); setSelectedHospital(null); setDoctors([]); setDoctorSearchTerm(''); }}
                            className="mb-6 px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors duration-200 transform hover:scale-105"
                        >
                            &larr; Back to Hospitals
                        </button>
                        <h2 className="text-2xl font-semibold text-gray-800 mb-4 border-b pb-3">
                            Doctors at {selectedHospital?.name} ({doctors.length} Total)
                        </h2>
                        <div className="mb-4">
                            <input
                                type="text"
                                placeholder="Search doctors by name or specialty..."
                                value={doctorSearchTerm}
                                onChange={(e) => setDoctorSearchTerm(e.target.value)}
                                className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500 shadow-sm"
                            />
                        </div>
                        <h3 className="text-xl font-semibold text-gray-700 mb-4 border-b pb-2">Add New Doctor</h3>
                        <form onSubmit={handleAddDoctor} className="space-y-4 mb-8">
                            <input type="text" name="name" placeholder="Doctor Name" className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500" required />
                            <input type="text" name="specialty" placeholder="Specialty (e.g., Cardiologist)" className="w-full p-3 border border-gray-300 rounded-md focus:ring-purple-500" required />
                            <button type="submit" className="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700 transition-colors duration-200">Add Doctor</button>
                        </form>
                        <h3 className="text-xl font-semibold text-gray-700 mb-4 border-b pb-2">Existing Doctors</h3>
                        {filteredDoctors.length === 0 ? (
                            <p className="text-gray-500">No doctors found matching your search or none added for this hospital yet.</p>
                        ) : (
                            <div className="space-y-3">
                                {filteredDoctors.map(doctor => (
                                    <div key={doctor.id} className="bg-gray-50 p-4 rounded-lg shadow-sm flex justify-between items-center">
                                        <div>
                                            <p className="font-semibold text-gray-800">{doctor.name}</p>
                                            <p className="text-sm text-gray-600">{doctor.specialty}</p>
                                            <p className="text-xs text-gray-500">
                                                {doctor.ratings && doctor.ratings.length > 0 ? `${doctor.ratings.length} reviews` : 'No reviews'}
                                            </p>
                                        </div>
                                        <div className="flex space-x-2">
                                            <button
                                                onClick={() => { setSelectedDoctor(doctor); setActiveSection('reviews'); fetchReviews(selectedHospital.id, doctor.id); }}
                                                className="px-3 py-1 bg-blue-500 text-white text-sm rounded-md hover:bg-blue-600 transition-colors"
                                            >
                                                Manage Reviews
                                            </button>
                                            <button
                                                onClick={() => {
                                                    const newName = prompt("Enter new doctor name:", doctor.name);
                                                    const newSpecialty = prompt("Enter new doctor specialty:", doctor.specialty);
                                                    if (newName !== null && newSpecialty !== null) {
                                                        handleEditDoctor(doctor.id, newName, newSpecialty);
                                                    }
                                                }}
                                                className="px-3 py-1 bg-yellow-500 text-white text-sm rounded-md hover:bg-yellow-600 transition-colors"
                                            >
                                                Edit
                                            </button>
                                            <button
                                                onClick={() => handleDeleteDoctor(doctor.id)}
                                                className="px-3 py-1 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 transition-colors"
                                            >
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                );

            case 'reviews':
                return (
                    <div>
                        <button
                            onClick={() => { setActiveSection('doctors'); setSelectedDoctor(null); setReviews([]); }}
                            className="mb-6 px-4 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors duration-200 transform hover:scale-105"
                        >
                            &larr; Back to Doctors
                        </button>
                        <h2 className="text-2xl font-semibold text-gray-800 mb-4 border-b pb-3">
                            Reviews for {selectedDoctor?.name}
                        </h2>

                        <h3 className="text-xl font-semibold text-gray-700 mb-4 border-b pb-2">Existing Reviews</h3>
                        {reviews.length === 0 ? (
                            <p className="text-gray-500">No reviews found for this doctor.</p>
                        ) : (
                            <div className="space-y-3">
                                {reviews.map((review, reviewIndex) => (
                                    <div key={reviewIndex} className="bg-gray-50 p-4 rounded-lg shadow-sm flex flex-col justify-between items-start">
                                        <div className="w-full flex justify-between items-start">
                                            <div>
                                                <p className="font-semibold text-gray-800">Rating: {review.stars} stars</p>
                                                <p className="text-sm text-gray-600 italic">"{review.comment || 'No comment provided'}"</p>
                                                <p className="text-xs text-gray-500 mt-1">Date: {review.date || 'N/A'} (Reviewer: {review.reviewerId || 'Unknown'})
                                                {review.comments && review.comments.length > 0 && (
                                                    <span className="ml-2 px-2 py-0.5 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
                                                        {review.comments.length} Comment{review.comments.length > 1 ? 's' : ''}
                                                    </span>
                                                )}
                                                </p>
                                            </div>
                                            <button
                                                onClick={() => handleDeleteReview(reviewIndex)}
                                                className="px-3 py-1 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 transition-colors ml-4"
                                            >
                                                Delete Review
                                            </button>
                                        </div>

                                        {/* Display Comments */}
                                        {review.comments && review.comments.length > 0 && (
                                            <div className="w-full mt-4 pt-4 border-t border-gray-200 space-y-2">
                                                <p className="font-semibold text-gray-700 text-sm">Comments:</p>
                                                {review.comments.map((comment, commentIndex) => (
                                                    <div key={comment.date + commentIndex} className="bg-gray-100 p-3 rounded-md flex justify-between items-start text-sm">
                                                        <div>
                                                            <p className="text-gray-800">{comment.text}</p>
                                                            <p className="text-xs text-gray-500 mt-1">Date: {comment.date || 'N/A'} (Commenter: {comment.userId || 'Unknown'})</p>
                                                        </div>
                                                        <button
                                                            onClick={() => handleDeleteComment(reviewIndex, commentIndex)}
                                                            className="px-2 py-1 bg-red-400 text-white text-xs rounded-md hover:bg-red-500 transition-colors ml-4"
                                                        >
                                                            Remove
                                                        </button>
                                                    </div>
                                                ))}
                                            </div>
                                        )}
                                    </div>
                                ))}
                            </div>
                        )}
                    </div>
                );

            default:
                return <p className="text-center text-gray-500 py-8">Select a section from the navigation.</p>;
        }
    };

    return (
        <div className="flex flex-col min-h-screen bg-gray-100">
            <header className="bg-gradient-to-r from-purple-700 to-indigo-600 text-white p-4 shadow-lg">
                <div className="container flex items-center justify-between">
                    <h1 className="text-3xl font-bold rounded-lg px-3 py-1 bg-white text-purple-800 shadow-md">RNTea Admin</h1>
                    {isAdminLoggedIn && (
                        <button onClick={handleLogout} className="px-3 py-1 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 transition-colors">Logout</button>
                    )}
                </div>
            </header>

            <main className="flex-grow container py-8">
                <FirebaseContext.Provider value={{
                    db: dbInstance,
                    auth: authInstance,
                    userId: currentUserId,
                    appId: appIdentifier,
                    loadingFirebase: loading,
                    showMessage: showMessage,
                    collection, doc, getDoc, getDocs, updateDoc, deleteDoc, query, where
                }}>
                    <MessageBox message={message.text} type={message.type} />
                    <div className="bg-white p-6 rounded-lg shadow-xl">
                        {renderContent()}
                    </div>
                </FirebaseContext.Provider>
            </main>

            <ConfirmModal
                isOpen={showConfirm}
                message="Are you sure you want to delete this item? This action cannot be undone."
                onConfirm={() => confirmAction()}
                onCancel={() => { setShowConfirm(false); setConfirmAction(null); }}
            />
        </div>
    );
}













// src/pages/HomePage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import '../index.css'; // Ensure Tailwind CSS and custom animations are applied

export default function HomePage() {
    return (
        // Outermost container now handles the full-page background image
        <div className="min-h-screen flex flex-col relative" style={{
            backgroundImage: "url('https://images.unsplash.com/photo-1602595688238-9fffe12d5af3?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D')",
            backgroundSize: 'cover',
            backgroundPosition: 'center',
            backgroundRepeat: 'no-repeat'
        }}>
            {/* Full-page semi-transparent overlay for text readability */}
            <div className="absolute inset-0 bg-gray-900 opacity-60 z-0"></div>

            {/* Header Section - updated with gradient background and higher z-index */}
            <header className="bg-gradient-to-r from-green-700 to-teal-600 text-white p-4 shadow-lg z-20 relative">
                <div className="container mx-auto flex justify-between items-center w-full">
                    {/* Logo in the header - updated with specified classes */}
                    <div className="text-3xl font-bold rounded-lg px-3 py-1 bg-white text-green-800 shadow-md transform hover:scale-105 transition-transform duration-200">
                        RNTea
                    </div>
                    {/* Navigation Links */}
                    <nav className="space-x-6 text-lg">
                        <Link to="/reviews" className="text-white hover:text-green-200 transition-colors duration-200">REVIEWS</Link>
                        <Link to="/about" className="text-white hover:text-green-200 transition-colors duration-200">ABOUT</Link>
                        <Link to="/contact" className="text-white hover:text-green-200 transition-colors duration-200">CONTACT US</Link>
                    </nav>
                </div>
            </header>

            {/* Main Content Area - placed above the overlay (z-index 10) */}
            <main className="flex-grow flex items-center justify-center p-4 relative z-10">
                <div className="bg-white bg-opacity-90 p-8 rounded-2xl shadow-2xl max-w-2xl w-full text-center transform scale-95 fade-in-up delay-400ms">
                    <h1 className="text-4xl sm:text-5xl font-extrabold text-gray-800 mb-6 leading-tight fade-in-up delay-600ms">
                        Welcome to RNTea: Rate, Navigate, Trust
                    </h1>
                    <p className="text-xl sm:text-2xl text-gray-600 mb-8 fade-in-up delay-800ms">
                        Do you really trust your Doctors? Let's hear from experienced RNs for a change.
                    </p>
                    <div className="flex flex-col sm:flex-row justify-center items-center space-y-4 sm:space-y-0 sm:space-x-6">
                        <Link to="/rn" className="block w-full sm:w-auto">
                            <button className="w-full px-8 py-5 bg-green-700 text-white text-xl font-semibold rounded-xl
                                           shadow-lg hover:bg-green-800 transition-all duration-300 transform hover:scale-105
                                           focus:outline-none focus:ring-4 focus:ring-green-400
                                           button-hover-effect scale-in delay-1000ms">
                                RN
                            </button>
                        </Link>
                        <Link to="/reviews" className="block w-full sm:w-auto">
                            <button className="w-full px-8 py-5 bg-teal-600 text-white text-xl font-semibold rounded-xl
                                           shadow-lg hover:bg-teal-700 transition-all duration-300 transform hover:scale-105
                                           focus:outline-none focus:ring-4 focus:ring-teal-300
                                           button-hover-effect scale-in delay-1200ms">
                                REVIEWS
                            </button>
                        </Link>
                    </div>

                    <p className="text-sm text-gray-500 mt-12 fade-in-up delay-1400ms">
                        RNs! We do not share identity of the individual leaving the review.
                    </p>
                </div>
            </main>

            {/* Footer - placed above the overlay (z-index 10) */}
            <footer className="bg-gray-800 text-white p-4 text-center mt-8 shadow-inner relative z-10">
                <div className="container text-sm">
                    <p>&copy; 2025 RNTea. All rights reserved.</p>
                    <p className="mt-2 text-gray-400">Disclaimer: This is a demo.</p>
                </div>
            </footer>
        </div>
    );
}












// src/pages/AboutPage.jsx
import React from 'react';
import { Link } from 'react-router-dom';
import '../index.css'; // Ensure Tailwind CSS and custom animations are applied

export default function AboutPage() {
    return (
        <div className="min-h-screen flex flex-col bg-gray-100">
            {/* Header Section (consistent with HomePage) */}
            <header className="bg-gradient-to-r from-green-700 to-teal-600 text-white p-4 shadow-lg z-20 relative">
                <div className="container mx-auto flex justify-between items-center w-full">
                    <Link to="/" className="text-3xl font-bold rounded-lg px-3 py-1 bg-white text-green-800 shadow-md transform hover:scale-105 transition-transform duration-200">
                        RNTea
                    </Link>
                    <nav className="space-x-6 text-lg">
                        <Link to="/reviews" className="text-white hover:text-green-200 transition-colors duration-200">REVIEWS</Link>
                        <Link to="/about" className="text-white hover:text-green-200 transition-colors duration-200">ABOUT</Link>
                        <Link to="/contact" className="text-white hover:text-green-200 transition-colors duration-200">CONTACT US</Link>
                    </nav>
                </div>
            </header>

            {/* Main Content Area */}
            <main className="flex-grow">
                {/* Hero Section */}
                <section className="relative bg-gradient-to-br from-blue-50 to-blue-200 py-20 px-4 text-center overflow-hidden">
                    <div className="container animated-section flex flex-col items-center justify-center min-h-[50vh]">
                        <h1 className="text-5xl md:text-6xl font-extrabold text-gray-900 mb-6 animated-text">
                            Empowering Your <span className="text-teal-600">Healthcare Choices</span>
                        </h1>
                        <p className="text-lg md:text-xl text-gray-700 max-w-3xl mb-8 animated-text" style={{ animationDelay: '0.3s' }}>
                            At RNTea, we believe in transparency and community to help you find the best care.
                            Discover insights, share experiences, and make informed decisions with confidence.
                        </p>
                        <img src="https://placehold.co/800x450/4ade80/FFFFFF?text=Diverse+Women+in+Healthcare+Tech" alt="Diverse women collaborating in healthcare tech"
                             className="mt-8 rounded-xl shadow-2xl w-full max-w-4xl h-auto animated-img" style={{ animationDelay: '0.6s' }} />
                    </div>
                </section>

                {/* Our Mission Section */}
                <section className="py-16 px-4 bg-white">
                    <div className="container flex flex-col md:flex-row items-center gap-10 animated-section">
                        <div className="md:w-1/2">
                            <img src="https://placehold.co/600x400/818cf8/FFFFFF?text=Woman+Doctor+Consulting" alt="Woman doctor consulting with patient"
                                 className="rounded-xl shadow-lg w-full h-auto animated-img" style={{ animationDelay: '0.1s' }} />
                        </div>
                        <div className="md:w-1/2 text-center md:text-left">
                            <h2 className="text-4xl font-bold text-gray-800 mb-6 animated-text" style={{ animationDelay: '0.3s' }}>Our Mission: Clarity, Compassion, Community</h2>
                            <p className="text-lg text-gray-600 mb-4 animated-text" style={{ animationDelay: '0.5s' }}>
                                We are a team driven by the vision of a healthier, more informed world. Our platform is built on the pillars of **transparency, user-centric design, and reliable information**. We aim to empower individuals to navigate the complexities of healthcare with ease and confidence.
                            </p>
                            <p className="text-lg text-gray-600 animated-text" style={{ animationDelay: '0.7s' }}>
                                RNTea provides a trusted space where real patient experiences contribute to a collective wisdom, guiding others towards optimal care.
                            </p>
                        </div>
                    </div>
                </section>

                {/* Why Choose Us / Our Values Section */}
                <section className="py-16 px-4 bg-gray-50">
                    <div className="container animated-section text-center">
                        <h2 className="text-4xl font-bold text-gray-800 mb-12 animated-text">Why Choose RNTea? Our Core Values</h2>
                        <div className="grid md:grid-cols-3 gap-8">
                            <div className="bg-white p-6 rounded-lg shadow-md flex flex-col items-center text-center animated-section" style={{ animationDelay: '0.1s' }}>
                                <div className="text-teal-500 mb-4 text-5xl">💡</div> {/* Lightbulb emoji */}
                                <h3 className="text-xl font-semibold text-gray-800 mb-3">Empowering Insights</h3>
                                <p className="text-gray-600">Access verified reviews and comprehensive information to make the best decisions for your health.</p>
                            </div>
                            <div className="bg-white p-6 rounded-lg shadow-md flex flex-col items-center text-center animated-section" style={{ animationDelay: '0.3s' }}>
                                <div className="text-purple-500 mb-4 text-5xl">🤝</div> {/* Handshake emoji */}
                                <h3 className="text-xl font-semibold text-gray-800 mb-3">Vibrant Community</h3>
                                <p className="text-gray-600">Join a network of individuals sharing valuable experiences, fostering a supportive environment.</p>
                            </div>
                            <div className="bg-white p-6 rounded-lg shadow-md flex flex-col items-center text-center animated-section" style={{ animationDelay: '0.5s' }}>
                                <div className="text-yellow-500 mb-4 text-5xl">✨</div> {/* Sparkle emoji */}
                                <h3 className="text-xl font-semibold text-gray-800 mb-3">Unwavering Integrity</h3>
                                <p className="text-gray-600">We maintain strict standards for review authenticity, ensuring trustworthy and unbiased information.</p>
                            </div>
                        </div>
                    </div>
                </section>

                {/* The Team Section */}
                <section className="py-16 px-4 bg-blue-50">
                    <div className="container animated-section text-center">
                        <h2 className="text-4xl font-bold text-gray-800 mb-12 animated-text">Meet Our Visionary Team</h2>
                        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-10">
                            <div className="bg-white p-6 rounded-lg shadow-lg flex flex-col items-center animated-section" style={{ animationDelay: '0.1s' }}>
                                <img src="https://placehold.co/150x150/60a5fa/FFFFFF?text=Dr.+Elara+Khan" alt="Dr. Elara Khan"
                                     className="w-32 h-32 rounded-full object-cover mb-4 border-4 border-teal-400 animated-img" />
                                <h3 className="text-2xl font-semibold text-gray-800">Dr. Elara Khan</h3>
                                <p className="text-teal-600 font-medium mb-2">Founder & CEO</p>
                                <p className="text-gray-600 text-center">A passionate advocate for patient rights and healthcare accessibility, Dr. Khan leads RNTea with a commitment to innovation.</p>
                            </div>
                            <div className="bg-white p-6 rounded-lg shadow-lg flex flex-col items-center animated-section" style={{ animationDelay: '0.3s' }}>
                                <img src="https://placehold.co/150x150/d8b4fe/FFFFFF?text=Ms.+Lena+Chen" alt="Ms. Lena Chen"
                                     className="w-32 h-32 rounded-full object-cover mb-4 border-4 border-purple-400 animated-img" />
                                <h3 className="text-2xl font-semibold text-gray-800">Ms. Lena Chen</h3>
                                <p className="text-purple-600 font-medium mb-2">Chief Technology Officer</p>
                                <p className="text-gray-600 text-center">Lena, a tech visionary, crafts intuitive and secure platforms, ensuring RNTea is always at the forefront of digital healthcare solutions.</p>
                            </div>
                            <div className="bg-white p-6 rounded-lg shadow-lg flex flex-col items-center animated-section" style={{ animationDelay: '0.5s' }}>
                                <img src="https://placehold.co/150x150/fde047/FFFFFF?text=Ms.+Sophia+Ross" alt="Ms. Sophia Ross"
                                     className="w-32 h-32 rounded-full object-cover mb-4 border-4 border-yellow-400 animated-img" />
                                <h3 className="text-2xl font-semibold text-gray-800">Ms. Sophia Ross</h3>
                                <p className="text-yellow-600 font-medium mb-2">Head of Community Engagement</p>
                                <p className="text-gray-600 text-center">Sophia fosters our thriving community, ensuring every voice is heard and every experience contributes to our shared knowledge.</p>
                            </div>
                        </div>
                    </div>
                </section>

                {/* Call to Action Section */}
                <section className="py-16 px-4 bg-gradient-to-r from-green-600 to-teal-500 text-white text-center">
                    <div className="container animated-section">
                        <h2 className="text-4xl font-bold mb-6 animated-text">Join the Movement for Better Healthcare</h2>
                        <p className="text-xl mb-8 max-w-3xl mx-auto animated-text" style={{ animationDelay: '0.3s' }}>
                            Your voice matters. Contribute to a community that's building a more transparent and trustworthy healthcare system for everyone.
                        </p>
                        <Link to="/reviews"
                           className="inline-block bg-white text-green-700 font-bold py-4 px-8 rounded-full text-lg shadow-xl hover:bg-gray-100 transform hover:scale-105 transition-all duration-300 cta-button ripple-effect" style={{ animationDelay: '0.6s' }}>
                            Start Exploring Today!
                        </Link>
                    </div>
                </section>
            </main>

            {/* Footer Section (consistent with HomePage) */}
            <footer className="bg-gray-800 text-white p-8 text-center mt-auto shadow-inner">
                <div className="container text-sm">
                    <p>&copy; 2025 RNTea. All rights reserved.</p>
                    <p className="mt-2 text-gray-400">Committed to transparency and informed healthcare choices.</p>
                </div>
            </footer>
        </div>
    );
}

