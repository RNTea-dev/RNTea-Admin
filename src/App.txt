// src/admin.jsx

import React, { useState, useEffect, createContext, useMemo } from 'react';
import ReactDOM from 'react-dom/client';
import { initializeApp } from 'firebase/app';
import { getAuth, onAuthStateChanged, signInWithCustomToken } from 'firebase/auth';
import { getFirestore, collection, doc, getDoc, getDocs, setDoc, updateDoc, deleteDoc, query, where, arrayUnion } from 'firebase/firestore';

import AdminPanel from './pages/AdminPanel.jsx';
import MessageBox from './components/MessageBox.jsx';
import ConfirmModal from './components/ConfirmModal.jsx';
import './index.css';

export const FirebaseContext = createContext(null);

// TEMPORARILY COMMENT OUT OR REMOVE THESE LINES FOR DEBUGGING
// const canvasFirebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
// const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
// const canvasAppId = typeof __app_id !== 'undefined' ? JSON.parse(__app_id) : null; // Original had JSON.parse on __app_id, fixed in previous thought, ensuring it's not the issue here.

const defaultFirebaseConfig = {
    apiKey: "AIzaSyBEwSVX9UY7-MNxeYwdbY0ZmDuXzYyt56g", // Replace with your actual Firebase API Key
    authDomain: "rntea-cca78.firebaseapp.com",
    projectId: "rntea-cca78", // This is your project ID
    storageBucket: "rntea-cca78.firebasestorage.app",
    messagingSenderId: "806310857835",
    appId: "1:806310857835:web:b03b05847c818ee4fe352e",
    measurementId: "G-ZKZBPS9FGE"
};

function AdminAppRoot() {
    const [firebaseAppInstance, setFirebaseAppInstance] = useState(null);
    const [db, setDb] = useState(null);
    const [auth, setAuth] = useState(null);
    const [currentUserId, setCurrentUserId] = useState(null);
    const [authReady, setAuthReady] = useState(false);
    const [loadingFirebase, setLoadingFirebase] = useState(true);
    const [message, setMessage] = useState({ text: '', type: '' });

    useEffect(() => {
        const initializeFirebase = async () => {
            try {
                // Use defaultFirebaseConfig directly for this debug test
                const configToUse = defaultFirebaseConfig; // Changed from canvasFirebaseConfig || defaultFirebaseConfig;
                const appInstance = initializeApp(configToUse);
                const authInstance = getAuth(appInstance);
                const dbInstance = getFirestore(appInstance);

                setFirebaseAppInstance(appInstance);
                setAuth(authInstance);
                setDb(dbInstance);

                const unsubscribe = onAuthStateChanged(authInstance, async (user) => {
                    if (user) {
                        setCurrentUserId(user.uid);
                    } else {
                        setCurrentUserId(null);
                        setMessage({ text: 'Please log in to access the Admin Panel.', type: 'info' });
                    }
                    setAuthReady(true);
                    setLoadingFirebase(false);
                });

                // Temporarily remove initialAuthToken usage for this test if it causes issues
                // if (initialAuthToken) {
                //     try {
                //         await signInWithCustomToken(authInstance, initialAuthToken);
                //     } catch (tokenError) {
                //         console.error("Error signing in with __initial_auth_token for admin:", tokenError);
                //         setMessage({ text: `Automatic admin login failed: ${tokenError.message}. Please try manual login.`, type: 'error' });
                //     }
                // } else if (!authInstance.currentUser) {
                //     setLoadingFirebase(false);
                // }
                // Keep this part if you are sure initialAuthToken is null or valid and doesn't interfere
                if (!authInstance.currentUser) {
                    setLoadingFirebase(false);
                }


                return () => unsubscribe();
            } catch (error) {
                console.error("Firebase Initialization Error for Admin App:", error);
                setMessage({ text: `Failed to initialize Firebase for admin: ${error.message}.`, type: 'error' });
                setLoadingFirebase(false);
                setAuthReady(false);
            }
        };
        initializeFirebase();
    }, []); // Dependencies for useEffect can remain [] if you comment out `canvasFirebaseConfig` and `initialAuthToken` usage

    // Memoize the context value
    const firebaseContextValue = useMemo(() => ({
        app: firebaseAppInstance,
        db,
        auth,
        userId: currentUserId,
        authReady,
        appId: defaultFirebaseConfig.projectId, // Directly use projectId for debugging
        setMessage,
        // Provide all Firestore functions that AdminPanel.jsx expects
        collection,
        doc,
        getDoc,
        getDocs,
        setDoc,
        updateDoc,
        deleteDoc,
        query,
        where,
        arrayUnion
    }), [firebaseAppInstance, db, auth, currentUserId, authReady, setMessage]); // Removed canvasAppId from deps here as well

    return (
        <FirebaseContext.Provider value={firebaseContextValue}>
            <MessageBox message={message.text} type={message.type} />
            {loadingFirebase ? (
                <p className="text-center text-gray-500 py-8">Initializing Admin Application and Firebase...</p>
            ) : (
                <AdminPanel />
            )}
        </FirebaseContext.Provider>
    );
}

const adminRootElement = document.getElementById('admin-root');
if (adminRootElement) {
    ReactDOM.createRoot(adminRootElement).render(
        <React.StrictMode>
            <AdminAppRoot />
        </React.StrictMode>
    );
} else {
    console.error("admin.jsx: ERROR - Admin root element not found in DOM. Cannot mount Admin App.");
}